#==============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 cc=81 tw=80
#==============================================================================
#
# DESCRIPTION: Debian generic recipe using the debootstrap mechanism
#
# USAGE:
#   Select directly in this recipe:
#
#   - distribution: debian or ubuntu
#   - release: wheezy, testing, sid...
#   - architechture: default amd64
#
#   or, override the globals directly in CLI:
#
#   kameleon build --global distrib:debian --global release:wheezy
#
#   or extends this recipe with your own and override those variable in it.
#
#==============================================================================
---
extend: base-qemu.yaml

global:
  distrib: debian
  release: stable
  deb_kernel_arch: $${deb_arch}

  bootstrap_packages: locales openssh-server linux-image-$${deb_kernel_arch}

  apt_enable_contrib: true
  apt_enable_nonfree: true

  qemu_uefi: true
  qemu_memory_size: 8G
  image_disk: $${kameleon_cwd}/$${kameleon_recipe_name}_disk
  qemu_additional_disks: $${image_disk}1,$${image_disk}2:1G,$${image_disk}3:512M:raw

bootstrap:
  - download_installer
  - prepare_qemu_disk
  - prepare_qemu_additional_disks
  - prepare_ssh_to_out_context
  - start_qemu
  - install_required_packages:
    - configure_apt_sources:
      - exec_out: echo "deb http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware" > /etc/apt/sources.list
      - apt-get_out: update
    - install_zfs_module:
      - apt-get_out: install dkms linux-headers-generic zfs-dkms
    - install_disk_utils:
      - apt-get_out: install gdisk zfsutils-linux
    - install_debootstrap:
      - apt-get_out: install debootstrap
setup:
  - setup_build_system:
    - check_uefi:
      - exec_out: dmesg | grep -i efivars
    - generate_hostid:
      - exec_out: zgenhostid -f 0x00bab10c
  - configure_disks:
    - wipe_disks:
      - exec_out: |
          set -e
          DISKS="/dev/vda /dev/vdb"
          for disk in $DISKS; do
            zpool labelclear -f $disk || true
            #blkdiscard -f $disk # Force TRIM on whole disk
            wipefs -a $disk || true
            sgdisk --zap-all $disk || true
          done
    - partition:
      - exec_out: |
          set -e
          n=0
          for disk in $DISKS; do
            sgdisk -a1 -n "1:24k:+1000k" -t1:ef02 -c 1:bios$n $disk
            sgdisk -I -n "2:1m:+512m" -t "2:ef00" -c 2:EFI$n $disk
            sgdisk -I -n "3:0:+1G" -t "3:bf01" -c 3:bpool$n $disk
            sgdisk -I -n "4:0:-8g" -t "4:bf00" -c 4:rpool$n $disk
            sgdisk -I -n "5:0:-10m" -t "5:8200" -c 5:swap$n $disk
            sgdisk -v
            ((n++))
          done
          partprobe
    - create_bpool:
      - exec_out: |
          set -e
          unset disks_bpool_partuuid
          for disk in $DISKS; do
              disks_bpool_partuuid+=(/dev/disk/by-partuuid/$(lsblk  ${disk}3 --nodeps -o partuuid -n))
          done
          zpool create \
              -o ashift=12 \
              -o autotrim=on \
              -o compatibility=grub2 \
              -o cachefile=/etc/zfs/zpool.cache \
              -O devices=off \
              -O acltype=posixacl -O xattr=sa \
              -O compression=lz4 \
              -O normalization=formD \
              -O relatime=on \
              -O canmount=off \
              -m none \
              bpool mirror ${disks_bpool_partuuid[*]}
    - create_rpool:
      - exec_out: |
          set -e
          unset disks_rpool_partuuid
          for disk in $DISKS; do
              disks_rpool_partuuid+=(/dev/disk/by-partuuid/$(lsblk  ${disk}4 --nodeps -o partuuid -n))
          done
          echo 'mypassphrase' > /etc/zfs/rpool.key
          chmod 000 /etc/zfs/rpool.key
          zpool create -f -o ashift=12 \
           -O compression=lz4 \
           -O acltype=posixacl \
           -O xattr=sa \
           -O relatime=on \
           -O encryption=aes-256-gcm \
           -O keylocation=file:///etc/zfs/rpool.key \
           -O keyformat=passphrase \
           -o autotrim=on \
           -o compatibility=openzfs-2.1-linux \
           -m none \
           rpool mirror ${disks_rpool_partuuid[*]}
    - create_datasets:
      - exec_out: |
          set -e
          zfs create -o canmount=off -o mountpoint=none rpool/ROOT
          zfs create -o canmount=off -o mountpoint=none bpool/BOOT
          . /etc/os-release
          export ID
          zfs create -o mountpoint=/boot bpool/BOOT/$ID
          zfs create -o canmount=noauto -o mountpoint=/ rpool/ROOT/$ID
          zfs mount rpool/ROOT/debian
          zfs create -o mountpoint=/home rpool/home
          zpool set bootfs=rpool/ROOT/$ID rpool
    - mount_in_mnt:
      - exec_out: |
          set -e
          zpool export rpool
          zpool import -N -R /rootfs rpool
          zfs load-key -L prompt rpool
          zpool export bpool
          zpool import -N -R /rootfs bpool

          zfs mount bpool/BOOT/$ID
          zfs mount rpool/home
          zfs mount rpool/ROOT/$ID
  - debootstrap
  - breakpoint
  - prepare_system_fs_for_chroot
  - debootstrap_post_config
export:
  - "@base"
