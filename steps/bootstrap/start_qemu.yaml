# Require SSH_FWD_PORT bash environment variable to be set

# This must be set if you want to boot an ISO image:
- qemu_iso_path: ""
- qemu_iso_boot: true
# Else that can be set to boot from a kernel, initrd and cmdline:
- qemu_kernel_path: ""
- qemu_initrd_path: ""
- qemu_append_cmdline: ""
# Else boot from disk.

- vm_expected_service: ssh
- boot_timeout: 100
- shutdown_timeout: 100
- debug: false
- telnet_port: ""
- no_reboot: true
- socat_monitor: socat - UNIX-CONNECT:$${qemu_monitor_socket}
- qemu_sendkeys_script: $${kameleon_data_dir}/qemu-sendkeys.rb
- qemu_sendkeys_opts: 
- qemu_sendkeys_commands: 
- vm_expected_service: ssh
- vm_cleanup_section: setup
- shutdown_vm_immediately: false
- force_vm_shutdown: true
- qemu_enable_kvm: true
- qemu_cpus: 2
- qemu_memory_size: 768
- qemu_monitor_socket: $${kameleon_cwd}/qemu_monitor.socket
- qemu_arch: $${arch}
- qemu_image_size: 10G
- qemu_pidfile: $${kameleon_cwd}/qemu.pid
- qemu_uefi: false
- qemu_uefi_code_path: /usr/share/AAVMF/AAVMF_CODE.fd
- qemu_uefi_vars_path: /usr/share/AAVMF/AAVMF_VARS.fd
- qemu_netdev_user_options:
- disk_cache: unsafe

- start_vm:
  - on_checkpoint: redo
  - check_cmd_local: qemu-system-$${qemu_arch}
  - check_cmd_local: socat
  - on_bootstrap_clean:
    - test:
      - exec_local: test "$${shutdown_vm_immediately}" == "false" -a "$${vm_cleanup_section}" == "bootstrap"
      - group: 
        - exec_local: &1 |
            if [ -f $${qemu_pidfile} ]; then
              _QEMU_PID=$(< $${qemu_pidfile})
              if ps -p $_QEMU_PID > /dev/null; then
                if [ "$${force_vm_shutdown}" == "true" ]; then
                  if [ -S $${qemu_monitor_socket} ]; then
                    echo "Executing a graceful shutdown of the qemu VM via the monitor socket..."
                    NEXT_WAIT_TIME=0
                    echo system_powerdown | socat - UNIX-CONNECT:$${qemu_monitor_socket} || true
                    while ps -p $_QEMU_PID > /dev/null && [ $NEXT_WAIT_TIME -lt $${shutdown_timeout} ];
                    do
                      sleep 1
                      echo -en "\rWaiting for qemu virtual machine to shutdown...($(( $${shutdown_timeout} - 1 - NEXT_WAIT_TIME++ ))s)"
                    done
                  fi
                else
                  echo "Waiting for the VM to shutdown"
                  echo "Run 'vncviewer :$VNC_PORT' to see what's happening in the VM"
                  while ps -p $_QEMU_PID > /dev/null;
                  do
                    sleep 2
                  done
                fi
              fi
            fi
        - exec_local: &2 |
            if [ -f $${qemu_pidfile} ]; then
              _QEMU_PID=$(< $${qemu_pidfile})
              if ps -p $_QEMU_PID > /dev/null; then
                if [ -S $${qemu_monitor_socket} ]; then
                  echo "The graceful shutdown of the qemu VM should have failed (monitor socket is there)..."
                fi
                echo "Killing qemu (pid: $_QEMU_PID)."
                kill -9 "$_QEMU_PID"
              fi
              rm -f $${qemu_pidfile}
            fi
            rm -f $${qemu_monitor_socket}
  - on_setup_clean:
    - test:
      - exec_local: test "$${shutdown_vm_immediately}" == "false" -a "$${vm_cleanup_section}" == "setup"
      - group:
        - exec_local: *1
        - exec_local: *2
  - on_export_clean:
    - test:
      - exec_local: test "$${shutdown_vm_immediately}" == "false" -a "$${vm_cleanup_section}" == "export"
      - group:
        - exec_local: *1
        - exec_local: *2
  - exec_local: |
      if [ "$${shutdown_vm_immediately}" == "true" ]; then
        echo "Qemu VM shutdown: immediately"
      else
        echo "Qemu VM shutdown: in $${vm_cleanup_section} section cleaning"
      fi
  - exec_local: |
      if [ -r $${qemu_pidfile} ] && pgrep -F $${qemu_pidfile} > /dev/null; then
        echo "Qemu pid file found, with process running: killing it !" 1>&2
        pkill -F $${qemu_pidfile}
        sleep 0.5
        if pgrep -F $${qemu_pidfile} > /dev/null; then
          echo "Failed to kill qemu process." 1>&2
          exit 1
        fi
      fi
  - exec_local: |
      echo "Starting qemu..."
      if [ "$${qemu_enable_kvm}" == "true" ] && (/usr/sbin/kvm-ok > /dev/null || egrep '(vmx|svm)' /proc/cpuinfo > /dev/null) ; then # print warning if /usr/sbin/kvm-ok is not installed
        if [ "$${qemu_arch}" == "aarch64" ]; then
          ENABLE_KVM="-enable-kvm -accel kvm -machine virt,gic-version=host,accel=kvm:tcg -cpu host"
          #ENABLE_KVM="-global virtio-blk-pci.scsi=off -no-user-config -enable-fips -machine virt,gic-version=host,accel=kvm:tcg -cpu host -rtc driftfix=slew -object rng-random,filename=/dev/urandom,id=rng0 -device virtio-rng-pci,rng=rng0"
        else #X86_64
          ENABLE_KVM="-enable-kvm -cpu host"
        fi
        BOOT_TIMEOUT=$${boot_timeout}
      else
        echo "No KVM acceleration used"
        BOOT_TIMEOUT=$(($${boot_timeout}*2))
      fi
      if [ -f "vm_state_to_load.txt" ]
      then
          SAVED_STATE="$(< vm_state_to_load.txt)"
          LOADVM="-loadvm $SAVED_STATE"
          rm -f vm_state_to_load.txt
      fi
      if [ "$${debug}" == "true" ]; then
        VNC_OPT=""
      else
        # Find empty VNC port
        VNC_PORT=$(( $(__find_free_port 5900 5910) - 5900 ))
        echo "VNC port: $VNC_PORT"
        VNC_OPT="-vnc :$VNC_PORT"
      fi
      if [ -n "$${telnet_port}" ]; then
        SERIAL_TELNET="telnet:localhost:$${telnet_port},server"
      fi
      # Select disk
      QEMU_DRIVES="-drive file=$${image_disk}.$${image_format},cache=$${disk_cache},media=disk,if=virtio,id=drive0"
      QEMU_BOOT=
      QEMU_APPEND_CMDLINE=
      if [ "$${qemu_uefi}" == "true" ]; then
        if [ ! -f $${kameleon_cwd}/qemu_uefi_vars.fd ]; then
          cp $${qemu_uefi_vars_path} $${kameleon_cwd}/qemu_uefi_vars.fd
        fi
        QEMU_BOOT="-drive if=pflash,format=raw,readonly,file=$${qemu_uefi_code_path} -drive if=pflash,format=raw,file=$${kameleon_cwd}/qemu_uefi_vars.fd"
      fi
      if [ -n "$${qemu_iso_path}" ]; then
        QEMU_DRIVES="-drive file=$${qemu_iso_path},readonly,media=cdrom $QEMU_DRIVES"
        if [ "$${qemu_iso_boot}" == "true" ]; then
          QEMU_BOOT="$QEMU_BOOT -boot order=d"
        fi
      elif [ -n "$${qemu_kernel_path}" ]; then
        QEMU_BOOT="$QEMU_BOOT -kernel $${qemu_kernel_path}"
        if [ -n "$${qemu_initrd_path}" ]; then
          QEMU_BOOT="$QEMU_BOOT -initrd $${qemu_initrd_path}"
        fi
        if [ -n "$${qemu_append_cmdline}" ]; then
          QEMU_APPEND_CMDLINE="$${qemu_append_cmdline}"
          QEMU_APPEND_CMDLINE=${QEMU_APPEND_CMDLINE//%LOCAL_IP%/$${local_ip}}
          QEMU_APPEND_CMDLINE=${QEMU_APPEND_CMDLINE//%HTTP_PORT%/$HTTP_PORT}
        fi
      fi
      if [ -n "$${qemu_netdev_user_options}" ]; then
        QEMU_NETDEV_USER_OPTIONS=",$${qemu_netdev_user_options}"
      fi
      if [ "$${no_reboot}" == "true" ]; then
        NO_REBOOT="-no-reboot"
      fi
      if [ -n "${SSH_FWD_PORT}" ]; then
        HOSTFWD=",hostfwd=tcp::${SSH_FWD_PORT}-:22"
      fi
      qemu-system-$${qemu_arch} $ENABLE_KVM -smp $${qemu_cpus} -m $${qemu_memory_size} -rtc base=localtime \
        -net nic,model=virtio -net user${QEMU_NETDEV_USER_OPTIONS}${HOSTFWD} \
        $QEMU_DRIVES \
        -monitor unix:$${qemu_monitor_socket},server,nowait -pidfile $${qemu_pidfile} -daemonize \
        $QEMU_BOOT ${QEMU_APPEND_CMDLINE:+-append "$QEMU_APPEND_CMDLINE"} $NO_REBOOT \
        $VNC_OPT $SERIAL_TELNET\
        $LOADVM
  - exec_local: |
      VM_AVAILABLE=0
      if [ "$${vm_expected_service}" == "ssh" ]; then
        TIMEOUT=$(( $(date +%s) + $BOOT_TIMEOUT ))
        until timeout 5 ssh -q -F $${ssh_config_file} -o ConnectionAttempts=1  $${kameleon_recipe_name} -t true && VM_AVAILABLE=1 || [ $(date +%s) -gt $TIMEOUT ];
        do
          echo -en "\rWaiting for SSH to become available in VM for out_context...($(( TIMEOUT - $(date +%s) ))s)"
          sleep 1
        done
        echo
      else
        TIMEOUT=$(( $(date +%s) + $BOOT_TIMEOUT ))
        until timeout 1 [ $(date +%s) -gt $TIMEOUT ];
        do
          echo -en "\rWaiting for VM to become available : ($(( TIMEOUT - $(date +%s) ))s)"
          sleep 1
        done
        echo
        VM_AVAILABLE=1
      fi
  - rescue:
    - exec_local: test $VM_AVAILABLE -eq 1
    - breakpoint: |
        Failed to get VM up and running (expected service: $${vm_expected_service}). Please verify the VM successfully booted with a vnc client.
  - test:
    - exec_local: test -e "$${qemu_sendkeys_commands}" -a -s "$${qemu_sendkeys_commands}"
    - exec_local: |
        echo "Sending keyboard commands to the VM: $${qemu_sendkeys_commands}"
        echo "(Local httpd server url: http://$${local_ip}:$HTTP_PORT)"
        ruby $${qemu_sendkeys_script} $${qemu_sendkeys_opts} "$(sed -e s/%LOCAL_IP%/$${local_ip}/g -e s/%HTTP_PORT%/$HTTP_PORT/g $${qemu_sendkeys_commands})" | $${socat_monitor} > /dev/null
    - exec_local: echo "No keyboard commands to send"

- shutdown_vm:
  - on_checkpoint: redo
  - on_clean:
    - test:
      - exec_local: test "$${shutdown_vm_immediately}" == "true"
      - exec_local: *2
  - test:
    - exec_local: test "$${shutdown_vm_immediately}" == "true"
    - exec_local: *1
