# Require SSH_FWD_PORT bash environment variable to be set

# This must be set if you want to boot an ISO image:
- qemu_iso_path: ""
- qemu_iso_boot: true
# Else that can be set to boot from a kernel, initrd and cmdline:
- qemu_kernel_path: ""
- qemu_initrd_path: ""
- qemu_append_cmdline: ""
# Else boot from disk.

- boot_timeout: 100
- shutdown_timeout: 100
- debug: false
- telnet_port: ""
- no_reboot: true
- qemu_sendkeys_script: $${kameleon_data_dir}/qemu-sendkeys.rb
- qemu_sendkeys_commands:
- vm_expected_service: ssh
- vm_cleanup_section: setup
- shutdown_vm_synchrone: false
- qemu_enable_kvm: true
- qemu_cpus: 2
- qemu_memory_size: 1024
- qemu_arch: $${arch}
- qemu_pidfile: $${kameleon_cwd}/qemu.pid
- qemu_uefi: false
- qemu_uefi_code_path: /usr/share/AAVMF/AAVMF_CODE.fd
- qemu_uefi_vars_path: /usr/share/AAVMF/AAVMF_VARS.fd
- qemu_netdev_user_options:
- qemu_additional_disks:
- disk_cache: unsafe

- start_vm:
  - on_checkpoint: redo
  - check_cmd_local: qemu-system-$${qemu_arch}
  - check_cmd_local: socat
  - check_cmd_local: kvm-ok
  - on_bootstrap_clean:
    - test:
      - exec_local: test "$${shutdown_vm_synchrone}" == "false" -a "$${vm_cleanup_section}" == "bootstrap"
      - group:
        - exec_local: &1 |
            set -e -o pipefail
            if [ -f $${qemu_pidfile} ]; then
              QEMU_PID=$(< $${qemu_pidfile})
              if ps -p $QEMU_PID > /dev/null; then
                if [ "$${shutdown_vm_synchrone}" == "false" ]; then
                  QEMU_MONITOR_SOCKET="$${qemu_monitor_socket}"
                  if [ -S $QEMU_MONITOR_SOCKET ]; then
                    echo "Executing a graceful shutdown of the qemu VM via the monitor socket..."
                    TIMEOUT=$(($(date +%s) + $${shutdown_timeout}))
                    while ! echo system_powerdown | socat - UNIX-CONNECT:$QEMU_MONITOR_SOCKET | grep -q 'system_powerdown' 2> /dev/null \
                          && ps -p $QEMU_PID > /dev/null \
                          && [ $(date +%s) -lt $TIMEOUT ]; do
                      sleep 1
                      echo -en "\rTriggering qemu virtual machine to shutdown...($(( TIMEOUT - $(date +%s) ))s)"
                    done
                    while ps -p $QEMU_PID > /dev/null \
                          && [ $(date +%s) -le $TIMEOUT ]; do
                      sleep 1
                      echo -en "\rWaiting for qemu virtual machine to shutdown...($(( TIMEOUT - $(date +%s) ))s)"
                    done
                  fi
                else
                  echo "Waiting for the VM to shutdown by itself"
                  echo "Run 'vncviewer :$VNC_PORT' to see what's happening in the VM"
                  while ps -p $QEMU_PID > /dev/null;
                  do
                    sleep 2
                  done
                fi
              fi
            fi
        - exec_local: &2 |
            set -e -o pipefail
            if [ -f $${qemu_pidfile} ]; then
              QEMU_PID=$(< $${qemu_pidfile})
              if ps -p $QEMU_PID > /dev/null; then
                QEMU_MONITOR_SOCKET="$${qemu_monitor_socket}"
                if [ "$${shutdown_vm_synchrone}" == "true" ]; then
                  QEMU_MONITOR_SOCKET="${QEMU_MONITOR_SOCKET%.socket}.synchrone.socket"
                fi
                if [ -S $QEMU_MONITOR_SOCKET ]; then
                  echo "The graceful shutdown of the qemu VM should have failed (monitor socket is there)..."
                fi
                echo "Killing qemu (pid: $QEMU_PID)."
                kill -9 "$QEMU_PID"
              fi
              rm -f $${qemu_pidfile}
            fi
            rm -f $QEMU_MONITOR_SOCKET
  - on_setup_clean:
    - test:
      - exec_local: test "$${shutdown_vm_synchrone}" == "false" -a "$${vm_cleanup_section}" == "setup"
      - group:
        - exec_local: *1
        - exec_local: *2
  - on_export_clean:
    - test:
      - exec_local: test "$${shutdown_vm_synchrone}" == "false" -a "$${vm_cleanup_section}" == "export"
      - group:
        - exec_local: *1
        - exec_local: *2
  - test:
    - exec_local: test "$${shutdown_vm_synchrone}" == "false"
    - exec_local: echo "Qemu start VM, VM shutdown in $${vm_cleanup_section} section cleaning"
    - exec_local: echo "Do nothing here, actual start done in the start_vm_synchrone step"
  - test:
    - exec_local: test "$${shutdown_vm_synchrone}" == "false"
    - group: &3
      - exec_local: |
          set -e -o pipefail
          if [ -r $${qemu_pidfile} ] && pgrep -F $${qemu_pidfile} > /dev/null; then
            echo "Qemu pid file found, with process running: killing it !" 1>&2
            pkill -F $${qemu_pidfile}
            sleep 0.5
            if [ -r $${qemu_pidfile} ] && pgrep -F $${qemu_pidfile} > /dev/null; then
              echo "Failed to kill qemu process." 1>&2
              exit 1
            fi
          fi
      - exec_local: |
          set -e -o pipefail
          echo "Starting qemu..."
          if [ "$${qemu_enable_kvm}" == "true" ] && (/usr/sbin/kvm-ok > /dev/null || egrep '(vmx|svm)' /proc/cpuinfo > /dev/null) ; then # print warning if /usr/sbin/kvm-ok is not installed
            if [ "$${qemu_arch}" == "aarch64" ]; then
              ENABLE_KVM="-enable-kvm -machine virt,gic-version=host,accel=kvm:tcg -cpu host"
              #ENABLE_KVM="-global virtio-blk-pci.scsi=off -no-user-config -enable-fips -machine virt,gic-version=host,accel=kvm:tcg -cpu host -rtc driftfix=slew -object rng-random,filename=/dev/urandom,id=rng0 -device virtio-rng-pci,rng=rng0"
            elif [ "$${qemu_arch}" == "ppc64" ]; then
              ENABLE_KVM="-enable-kvm -machine pseries,accel=kvm:tcg -cpu host"
            else #X86_64
              ENABLE_KVM="-enable-kvm -cpu host"
            fi
            BOOT_TIMEOUT=$${boot_timeout}
          else
            echo "No KVM acceleration used"
            BOOT_TIMEOUT=$(($${boot_timeout}*2))
          fi
          if [ -f "vm_state_to_load.txt" ]
          then
              SAVED_STATE="$(< vm_state_to_load.txt)"
              LOADVM="-loadvm $SAVED_STATE"
              rm -f vm_state_to_load.txt
          fi
          if [ "$${debug}" == "true" ]; then
            VNC_OPT=""
          else
            # Find empty VNC port
            VNC_PORT=$(( $(__find_free_port 5900 5910) - 5900 ))
            echo "VNC port: $VNC_PORT"
            VNC_OPT="-vnc :$VNC_PORT"
          fi
          if [ -n "$${telnet_port}" ]; then
            SERIAL_TELNET="telnet:localhost:$${telnet_port},server"
          fi
          # Select disk
          DRIVE_ID=0
          QEMU_DRIVES="-drive file=$${image_disk}.$${image_format},format=$${image_format},cache=$${disk_cache},media=disk,if=virtio,id=drive$((DRIVE_ID++))"
          QEMU_ADDITIONAL_DISKS="$${qemu_additional_disks}"
          for DISK in ${QEMU_ADDITIONAL_DISKS//,/ }; do
            DISK=(${DISK//:/ })
            QEMU_DRIVES="$QEMU_DRIVES -drive file=${DISK[0]}.${DISK[2]:-$${image_format}},format=${DISK[2]:-$${image_format}},cache=$${disk_cache},media=disk,if=virtio,id=drive$((DRIVE_ID++))"
          done
          QEMU_BOOT=
          QEMU_APPEND_CMDLINE=
          if [ "$${qemu_uefi}" == "true" ]; then
            if [ ! -f $${kameleon_cwd}/qemu_uefi_vars.fd ]; then
              qemu-img convert -O qcow2 $${qemu_uefi_vars_path} $${kameleon_cwd}/qemu_uefi_vars.fd
            fi
            QEMU_BOOT="-drive if=pflash,format=raw,readonly=on,file=$${qemu_uefi_code_path} -drive if=pflash,format=qcow2,file=$${kameleon_cwd}/qemu_uefi_vars.fd"
          fi
          if [ -n "$${qemu_iso_path}" ]; then
            QEMU_DRIVES="-drive file=$${qemu_iso_path},readonly=on,media=cdrom $QEMU_DRIVES"
            if [ "$${qemu_iso_boot}" == "true" ]; then
              QEMU_BOOT="$QEMU_BOOT -boot order=d"
            fi
          elif [ -n "$${qemu_kernel_path}" ]; then
            QEMU_BOOT="$QEMU_BOOT -kernel $${qemu_kernel_path}"
            if [ -n "$${qemu_initrd_path}" ]; then
              QEMU_BOOT="$QEMU_BOOT -initrd $${qemu_initrd_path}"
            fi
            if [ -n "$${qemu_append_cmdline}" ]; then
              QEMU_APPEND_CMDLINE="$${qemu_append_cmdline}"
              QEMU_APPEND_CMDLINE=${QEMU_APPEND_CMDLINE//%LOCAL_IP%/$${local_ip}}
              QEMU_APPEND_CMDLINE=${QEMU_APPEND_CMDLINE//%HTTP_PORT%/$HTTP_PORT}
            fi
          fi
          if [ -n "$${qemu_netdev_user_options}" ]; then
            # eg. qemu_netdev_user_options: "domainename=FROM_HOST,dnssearch=FROM_HOST" (no space)
            if echo "$${qemu_netdev_user_options}" | grep -q -e 'domainname=FROM_HOST' -e 'dnssearch=FROM_HOST'; then
              QEMU_DNSSEARCH=""
              # '(grep || true) | sed ...' because set -eo pipefail will make the script fail if grep does not find any matching line
              for d in $((grep -e '^search\s' /etc/resolv.conf || true) | sed -e 's/^search\s\+//'); do
                QEMU_DNSSEARCH="$QEMU_DNSSEARCH,dnssearch=$d"
              done
              QEMU_DOMAINNAME=$((grep -e '^domain\s' /etc/resolv.conf || true) | sed -e 's/^domain\s\+//')
              QEMU_NETDEV_USER_OPTIONS=$(echo ',$${qemu_netdev_user_options}' | sed -e "s/,\s*dnssearch=FROM_HOST/$QEMU_DNSSEARCH/" -e "s/,\s*domainname=FROM_HOST/${QEMU_DOMAINNAME:+,domainname=$QEMU_DOMAINNAME}/")
            else
              QEMU_NETDEV_USER_OPTIONS=",$${qemu_netdev_user_options}"
            fi
          fi
          if [ "$${no_reboot}" == "true" ]; then
            NO_REBOOT="-no-reboot"
          fi
          if [ -n "${SSH_FWD_PORT}" ]; then
            HOSTFWD=",hostfwd=tcp::${SSH_FWD_PORT}-:22"
          fi
          QEMU_MONITOR_SOCKET="$${qemu_monitor_socket}"
          if [ "$${shutdown_vm_synchrone}" == "true" ]; then
            QEMU_MONITOR_SOCKET="${QEMU_MONITOR_SOCKET%.socket}.synchrone.socket"
          fi
          qemu-system-$${qemu_arch} $ENABLE_KVM -smp $${qemu_cpus} -m $${qemu_memory_size} -rtc base=localtime \
            -net nic,model=virtio -net user${QEMU_NETDEV_USER_OPTIONS}${HOSTFWD} \
            $QEMU_DRIVES \
            -monitor unix:$QEMU_MONITOR_SOCKET,server,nowait -pidfile $${qemu_pidfile} -daemonize \
            $QEMU_BOOT ${QEMU_APPEND_CMDLINE:+-append "$QEMU_APPEND_CMDLINE"} $NO_REBOOT \
            $VNC_OPT $SERIAL_TELNET\
            $LOADVM
      - exec_local: |
          set -e -o pipefail
          VM_AVAILABLE=0
          if [ "$${vm_expected_service}" == "ssh" ]; then
            TIMEOUT=$(( $(date +%s) + $BOOT_TIMEOUT ))
            until timeout 5 ssh -q -F $${ssh_config_file} -o ConnectionAttempts=1  $${kameleon_recipe_name} true > /dev/null && VM_AVAILABLE=1 || [ $(date +%s) -gt $TIMEOUT ];
            do
              echo -en "\rWaiting for SSH to become available in VM for out_context...($(( TIMEOUT - $(date +%s) ))s)"
              sleep 1
            done
            echo
          else
            TIMEOUT=$(( $(date +%s) + $BOOT_TIMEOUT ))
            until timeout 1 [ $(date +%s) -gt $TIMEOUT ];
            do
              echo -en "\rWaiting for VM to become available : ($(( TIMEOUT - $(date +%s) ))s)"
              sleep 1
            done
            echo
            VM_AVAILABLE=1
          fi
      - rescue:
        - exec_local: test $VM_AVAILABLE -eq 1
        - breakpoint: |
            Failed to get VM up and running (expected service: $${vm_expected_service}). Please verify the VM successfully booted with a vnc client.
      - test:
        - exec_local: test -e "$${qemu_sendkeys_commands}" -a -s "$${qemu_sendkeys_commands}"
        - exec_local: |
            set -e -o pipefail
            echo "Sending keyboard commands to the VM: $${qemu_sendkeys_commands}"
            echo "(Local httpd server url: http://$${local_ip}:$HTTP_PORT)"
            QEMU_MONITOR_SOCKET="$${qemu_monitor_socket}"
            if [ "$${shutdown_vm_synchrone}" == "true" ]; then
              QEMU_MONITOR_SOCKET="${QEMU_MONITOR_SOCKET%.socket}.synchrone.socket"
            fi
            ruby $${qemu_sendkeys_script} -d 0.05 "$(sed -e s/%LOCAL_IP%/$${local_ip}/g -e s/%HTTP_PORT%/$HTTP_PORT/g $${qemu_sendkeys_commands})" | socat - UNIX-CONNECT:$QEMU_MONITOR_SOCKET > /dev/null
        - exec_local: echo "No keyboard commands to send"

- start_vm_synchrone:
  - on_checkpoint: use_cache
  - check_cmd_local: qemu-system-$${qemu_arch}
  - check_cmd_local: socat
  - check_cmd_local: kvm-ok
  - on_clean:
    - test:
      - exec_local: test "$${shutdown_vm_synchrone}" == "true"
      - exec_local: *2
  - test:
    - exec_local: test "$${shutdown_vm_synchrone}" == "true"
    - exec_local: echo "Qemu start VM synchrone, VM will shutdown by itself"
    - exec_local: echo "Do nothing here, actual start done in the start_vm step"
  - test:
    - exec_local: test "$${shutdown_vm_synchrone}" == "true"
    - group: *3
  - test:
    - exec_local: test "$${shutdown_vm_synchrone}" == "true"
    - exec_local: *1
