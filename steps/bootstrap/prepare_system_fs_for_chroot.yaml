- rootfs:
- rootfs_container_work_dir: $${rootfs}
- rootfs_system_unsetup_section: setup

- mount_system_fs_in_chroot:
  - on_checkpoint: disabled
  - exec_out: |
      set -e
      touch $KAMELEON_WORKDIR/.KAMELEON_SETUP_ROOTFS_SYSTEM
      for d in dev dev/pts proc sys; do
        mkdir -p $${rootfs_container_work_dir}/$d
        mount --bind /$d $${rootfs_container_work_dir}/$d
      done
      mkdir -p $${rootfs_container_work_dir}/etc
      if [ -e $${rootfs_container_work_dir}/etc/resolv.conf -o -h $${rootfs_container_work_dir}/etc/resolv.conf ]; then
        ls -l $${rootfs_container_work_dir}/etc/resolv.conf
        if ! [ -e $${rootfs_container_work_dir}/etc/.resolv.conf.kameleon ]; then
          mv -v $${rootfs_container_work_dir}/etc/resolv.conf $${rootfs_container_work_dir}/etc/.resolv.conf.kameleon
        else
          rm $${rootfs_container_work_dir}/etc/resolv.conf
        fi
      fi
      cp -v /etc/resolv.conf $${rootfs_container_work_dir}/etc/resolv.conf
  - on_setup_clean:
    - test:
      - exec_out: test $${rootfs_system_unsetup_section} == "setup"
      - exec_out: &1 |
          set -e
          if [ -e $KAMELEON_WORKDIR/.KAMELEON_SETUP_ROOTFS_SYSTEM ]; then
            # list sub-mounts of rootfs but not rootfs itself, and umount them
            for d in $(findmnt -o TARGET -l -n | grep -e '^$${rootfs_container_work_dir}.' | sort -r); do
              umount $d
            done
            if [ -e $${rootfs_container_work_dir}/etc/.resolv.conf.kameleon -o -h $${rootfs_container_work_dir}/etc/.resolv.conf.kameleon ]; then
              rm -f $${rootfs_container_work_dir}/etc/resolv.conf
              mv -v $${rootfs_container_work_dir}/etc/.resolv.conf.kameleon $${rootfs_container_work_dir}/etc/resolv.conf
              ls -l $${rootfs_container_work_dir}/etc/resolv.conf
            fi
            rm $KAMELEON_WORKDIR/.KAMELEON_SETUP_ROOTFS_SYSTEM
          fi
  - on_export_clean:
    - test:
      - exec_out: test $${rootfs_system_unsetup_section} == "export"
      - exec_out: *1
